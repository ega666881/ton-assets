[
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "AssetData",
        "importPath": "to_review.models",
        "description": "to_review.models",
        "isExtraImport": true,
        "detail": "to_review.models",
        "documentation": {}
    },
    {
        "label": "AssetData",
        "importPath": "to_review.models",
        "description": "to_review.models",
        "isExtraImport": true,
        "detail": "to_review.models",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "normalize_address",
        "importPath": "utlis",
        "description": "utlis",
        "isExtraImport": true,
        "detail": "utlis",
        "documentation": {}
    },
    {
        "label": "normalize_address",
        "importPath": "utlis",
        "description": "utlis",
        "isExtraImport": true,
        "detail": "utlis",
        "documentation": {}
    },
    {
        "label": "normalize_address",
        "importPath": "utlis",
        "description": "utlis",
        "isExtraImport": true,
        "detail": "utlis",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "__get_stonfi_assets",
        "importPath": "dexes",
        "description": "dexes",
        "isExtraImport": true,
        "detail": "dexes",
        "documentation": {}
    },
    {
        "label": "__get_megaton_assets",
        "importPath": "dexes",
        "description": "dexes",
        "isExtraImport": true,
        "detail": "dexes",
        "documentation": {}
    },
    {
        "label": "__get_dedust_assets",
        "importPath": "dexes",
        "description": "dexes",
        "isExtraImport": true,
        "detail": "dexes",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "HTTPAdapter",
        "importPath": "requests.adapters",
        "description": "requests.adapters",
        "isExtraImport": true,
        "detail": "requests.adapters",
        "documentation": {}
    },
    {
        "label": "Retry",
        "importPath": "urllib3",
        "description": "urllib3",
        "isExtraImport": true,
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "get_blacklist_addresses",
        "importPath": "to_review.readers",
        "description": "to_review.readers",
        "isExtraImport": true,
        "detail": "to_review.readers",
        "documentation": {}
    },
    {
        "label": "get_skip_addresses",
        "importPath": "to_review.readers",
        "description": "to_review.readers",
        "isExtraImport": true,
        "detail": "to_review.readers",
        "documentation": {}
    },
    {
        "label": "get_known_assets_addresses",
        "importPath": "to_review.readers",
        "description": "to_review.readers",
        "isExtraImport": true,
        "detail": "to_review.readers",
        "documentation": {}
    },
    {
        "label": "generate_to_review_html",
        "importPath": "to_review.presenter",
        "description": "to_review.presenter",
        "isExtraImport": true,
        "detail": "to_review.presenter",
        "documentation": {}
    },
    {
        "label": "add_blacklist",
        "importPath": "to_review.presenter",
        "description": "to_review.presenter",
        "isExtraImport": true,
        "detail": "to_review.presenter",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "AssetData",
        "kind": 6,
        "importPath": "to_review.models",
        "description": "to_review.models",
        "peekOfCode": "class AssetData:\n    address: str\n    link: str\n    name: str\n    category: str\n    website: str\n    description: str\n    def __init__(self, address: str, link: str, name: str, category: str, website: str, description: str):\n        self.address = address\n        self.link = link",
        "detail": "to_review.models",
        "documentation": {}
    },
    {
        "label": "generate_to_review_html",
        "kind": 2,
        "importPath": "to_review.presenter",
        "description": "to_review.presenter",
        "peekOfCode": "def generate_to_review_html(assets: list[AssetData]):\n    with open(\"to_review.html\", \"w\") as html:\n        rows = \"\"\n        for i in range(len(assets)):\n            asset = assets[i]\n            rows += ROW_TEMPLATE.format(\n                i=i,\n                link=asset.link,\n                address=asset.address,\n                category=asset.category,",
        "detail": "to_review.presenter",
        "documentation": {}
    },
    {
        "label": "add_blacklist",
        "kind": 2,
        "importPath": "to_review.presenter",
        "description": "to_review.presenter",
        "peekOfCode": "def add_blacklist(assets: list[AssetData]):\n    with open(\"blacklist.csv\", \"a\") as csvfile:\n        writer = csv.writer(csvfile)\n        for asset in assets:\n            writer.writerow([asset.address])",
        "detail": "to_review.presenter",
        "documentation": {}
    },
    {
        "label": "ROW_TEMPLATE",
        "kind": 5,
        "importPath": "to_review.presenter",
        "description": "to_review.presenter",
        "peekOfCode": "ROW_TEMPLATE = \"\"\"\n      <tr class=\"row{i}\">\n        <td class=\"index\">{i}</td>\n        <td class=\"address\"><a href=\"{link}\" class=\"address{i}\">{address}</a></td>\n        <td class=\"category\"><input type=\"text\" class=\"category{i}\" name=\"category{i}\" placeholder=\"Enter category\" value=\"{category}\"></td>\n        <td class=\"name\"><input type=\"text\" class=\"name{i}\" name=\"name{i}\" placeholder=\"Enter name\" value=\"{name}\"></td>\n        <td class=\"website\"><a href=\"website\" class=\"website{i}\">{website}</a></td>\n        <td class=\"description\"><input type=\"text\" class=\"description{i}\" name=\"description{i}\" placeholder=\"Enter description\" value=\"{description}\"></td>\n        <td class=\"accept\"><input type=\"checkbox\" class=\"accept{i}\" name=\"{i}\"></td>\n      </tr>",
        "detail": "to_review.presenter",
        "documentation": {}
    },
    {
        "label": "PAGE_TEMPLATE",
        "kind": 5,
        "importPath": "to_review.presenter",
        "description": "to_review.presenter",
        "peekOfCode": "PAGE_TEMPLATE = \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>To review</title>\n  <style>\n    body {{\n      font-family: Arial, sans-serif;\n    }}",
        "detail": "to_review.presenter",
        "documentation": {}
    },
    {
        "label": "get_known_assets_addresses",
        "kind": 2,
        "importPath": "to_review.readers",
        "description": "to_review.readers",
        "peekOfCode": "def get_known_assets_addresses() -> set[str]:\n    addresses = set()\n    for file in os.listdir():\n        if not file.endswith(\".json\"): # skip not .json files\n            continue\n        data_list = json.load(open(file))\n        for curr in data_list:\n            if \"address\" not in curr:\n                continue # skip if dont contain address\n            addresses.add(normalize_address(curr[\"address\"], to_raw=False))",
        "detail": "to_review.readers",
        "documentation": {}
    },
    {
        "label": "get_blacklist_addresses",
        "kind": 2,
        "importPath": "to_review.readers",
        "description": "to_review.readers",
        "peekOfCode": "def get_blacklist_addresses() -> set[str]:\n    addresses = set()\n    with open(\"blacklist.csv\", mode='r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            addresses.add(row[0])\n    return addresses\ndef get_skip_addresses() -> set[str]:\n    addresses = set()\n    with open(\"skip_list.csv\", mode='r') as csvfile:",
        "detail": "to_review.readers",
        "documentation": {}
    },
    {
        "label": "get_skip_addresses",
        "kind": 2,
        "importPath": "to_review.readers",
        "description": "to_review.readers",
        "peekOfCode": "def get_skip_addresses() -> set[str]:\n    addresses = set()\n    with open(\"skip_list.csv\", mode='r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            addresses.add(row[0])\n    return addresses",
        "detail": "to_review.readers",
        "documentation": {}
    },
    {
        "label": "Asset",
        "kind": 6,
        "importPath": "dexes",
        "description": "dexes",
        "peekOfCode": "class Asset(BaseModel):\n    name: str\n    address: str\n    symbol: str\nclass MegatonAsset(Asset):\n    type: int\n    isVisible: int\nclass StonfiAsset(BaseModel):\n    contract_address: str\n    display_name: str",
        "detail": "dexes",
        "documentation": {}
    },
    {
        "label": "MegatonAsset",
        "kind": 6,
        "importPath": "dexes",
        "description": "dexes",
        "peekOfCode": "class MegatonAsset(Asset):\n    type: int\n    isVisible: int\nclass StonfiAsset(BaseModel):\n    contract_address: str\n    display_name: str\n    symbol: str\n    kind: str\n    decimals: int\n    community: bool",
        "detail": "dexes",
        "documentation": {}
    },
    {
        "label": "StonfiAsset",
        "kind": 6,
        "importPath": "dexes",
        "description": "dexes",
        "peekOfCode": "class StonfiAsset(BaseModel):\n    contract_address: str\n    display_name: str\n    symbol: str\n    kind: str\n    decimals: int\n    community: bool\n    deprecated: bool\n    blacklisted: bool\ndef __get_stonfi_assets() -> List[Asset]:",
        "detail": "dexes",
        "documentation": {}
    },
    {
        "label": "collect_all_dexes",
        "kind": 2,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "def collect_all_dexes():\n    temp, jettons = list(), list()\n    for file in sorted(glob.glob(\"jettons/*.yaml\")):\n        if file.endswith(DEXES_FILE_NAME):\n            continue\n        temp.append(yaml.safe_load(open(file)))\n    for item in temp:\n        if isinstance(item, list):\n            jettons.extend(item)\n        else:",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "merge_jettons",
        "kind": 2,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "def merge_jettons():\n    temp = [yaml.safe_load(open(file)) for file in sorted(glob.glob(\"jettons/*.yaml\"))]\n    jettons = []\n    for j in temp:\n        if isinstance(j, list):\n            jettons.extend(j)\n        else:\n            jettons.append(j)\n    already_exist_address = dict()\n    for j in jettons:",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "merge_accounts",
        "kind": 2,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "def merge_accounts(accounts):\n    main_page = list()\n    for file in ('accounts/infrastructure.yaml', 'accounts/defi.yaml', 'accounts/celebrities.yaml'):\n        accs = yaml.safe_load(open(file))\n        main_page.extend([(x['name'], x['address']) for x in accs])\n        accounts.extend(yaml.safe_load(open(file)))\n    files = ('accounts/givers.yaml', 'accounts/custodians.yaml', 'accounts/bridges.yaml', 'accounts/validators.yaml',\n             'accounts/scammers.yaml', 'accounts/notcoin.yaml', 'accounts/dapps.yaml')\n    for file in files:\n        accounts.extend(yaml.safe_load(open(file)))",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "merge_collections",
        "kind": 2,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "def merge_collections():\n    raw = [yaml.safe_load(open(file)) for file in sorted(glob.glob(\"collections/*.yaml\"))]\n    collections = list()\n    for c in raw:\n        if isinstance(c, list):\n            collections.extend(c)\n        else:\n            collections.append(c)\n    for collection in collections:\n        collection['address'] = normalize_address(collection['address'], True)",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "def main():\n    if len([x for x in glob.glob(\"*.yaml\")]) > 0:\n        raise Exception(\"please don't add yaml files to root directory. use jettons/ or collections/\")\n    collect_all_dexes()\n    jettons = merge_jettons()\n    collections = merge_collections()\n    # accounts = merge_accounts([{'name': x[0] + \" master\", 'address': x[1]} for x in jettons])\n    accounts = merge_accounts([])\n    jettons_md = \"\\n\".join([\"[%s](%s%s) | %s\" % (j[0], EXPLORER_JETTONS, normalize_address(j[1], True), normalize_address(j[1], False)) for j in jettons])\n    accounts_md = \"\\n\".join([\"[%s](%s%s) | %s\" % (j[0], EXPLORER_ACCOUNTS, normalize_address(j[1], True), normalize_address(j[1], False)) for j in accounts])",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "EXPLORER_JETTONS",
        "kind": 5,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "EXPLORER_JETTONS = \"https://tonviewer.com/\"\nEXPLORER_ACCOUNTS = \"https://tonviewer.com/\"\nEXPLORER_COLLECTIONS = \"https://tonviewer.com/\"\nDEXES_FILE_NAME = \"imported_from_dex.yaml\"\ndef collect_all_dexes():\n    temp, jettons = list(), list()\n    for file in sorted(glob.glob(\"jettons/*.yaml\")):\n        if file.endswith(DEXES_FILE_NAME):\n            continue\n        temp.append(yaml.safe_load(open(file)))",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "EXPLORER_ACCOUNTS",
        "kind": 5,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "EXPLORER_ACCOUNTS = \"https://tonviewer.com/\"\nEXPLORER_COLLECTIONS = \"https://tonviewer.com/\"\nDEXES_FILE_NAME = \"imported_from_dex.yaml\"\ndef collect_all_dexes():\n    temp, jettons = list(), list()\n    for file in sorted(glob.glob(\"jettons/*.yaml\")):\n        if file.endswith(DEXES_FILE_NAME):\n            continue\n        temp.append(yaml.safe_load(open(file)))\n    for item in temp:",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "EXPLORER_COLLECTIONS",
        "kind": 5,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "EXPLORER_COLLECTIONS = \"https://tonviewer.com/\"\nDEXES_FILE_NAME = \"imported_from_dex.yaml\"\ndef collect_all_dexes():\n    temp, jettons = list(), list()\n    for file in sorted(glob.glob(\"jettons/*.yaml\")):\n        if file.endswith(DEXES_FILE_NAME):\n            continue\n        temp.append(yaml.safe_load(open(file)))\n    for item in temp:\n        if isinstance(item, list):",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "DEXES_FILE_NAME",
        "kind": 5,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "DEXES_FILE_NAME = \"imported_from_dex.yaml\"\ndef collect_all_dexes():\n    temp, jettons = list(), list()\n    for file in sorted(glob.glob(\"jettons/*.yaml\")):\n        if file.endswith(DEXES_FILE_NAME):\n            continue\n        temp.append(yaml.safe_load(open(file)))\n    for item in temp:\n        if isinstance(item, list):\n            jettons.extend(item)",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "ALLOWED_KEYS",
        "kind": 5,
        "importPath": "generator",
        "description": "generator",
        "peekOfCode": "ALLOWED_KEYS =  {'symbol', 'name', 'address', 'description', 'image', 'social', 'websites', 'decimals', 'coinmarketcap', 'coingecko'}\ndef merge_jettons():\n    temp = [yaml.safe_load(open(file)) for file in sorted(glob.glob(\"jettons/*.yaml\"))]\n    jettons = []\n    for j in temp:\n        if isinstance(j, list):\n            jettons.extend(j)\n        else:\n            jettons.append(j)\n    already_exist_address = dict()",
        "detail": "generator",
        "documentation": {}
    },
    {
        "label": "clone_ton_labels_repo",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)\ndef get_types_from_tonapi(address: str) -> list[str]:\n    url = TON_API_ACCOUNT_URL + address\n    session = requests.Session()\n    retry_strategy = Retry(\n        backoff_factor=0.5,\n        status_forcelist=[429, 502]",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "rm_ton_labels_dir",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)\ndef get_types_from_tonapi(address: str) -> list[str]:\n    url = TON_API_ACCOUNT_URL + address\n    session = requests.Session()\n    retry_strategy = Retry(\n        backoff_factor=0.5,\n        status_forcelist=[429, 502]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "get_types_from_tonapi",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def get_types_from_tonapi(address: str) -> list[str]:\n    url = TON_API_ACCOUNT_URL + address\n    session = requests.Session()\n    retry_strategy = Retry(\n        backoff_factor=0.5,\n        status_forcelist=[429, 502]\n    )\n    adapter = HTTPAdapter(max_retries=retry_strategy)\n    session.mount('https://', adapter)\n    response = session.get(url)",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "is_asset_to_blacklist",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def is_asset_to_blacklist(types: list[str]):\n    # add asset to blacklist if len(types) == 1 and this type is one of jetton types or if it has nft in type\n    if len(types) == 1 and types[0] in BLACKLIST_JETTONS_TYPES:\n        return True\n    for curr_type in types:\n        if curr_type in BLACKLIST_NFT_TYPES:\n            return True\n    return False\n# Returns dict of blacklist assets and whitelist assets\ndef get_asset_from_json_file(file: str, skip_addr_set: set[str]) -> dict[str, list[AssetData]]:",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "get_asset_from_json_file",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def get_asset_from_json_file(file: str, skip_addr_set: set[str]) -> dict[str, list[AssetData]]:\n    assets = {\"blacklist\": [], \"whitelist\": []}\n    with open(file, 'r') as f:\n        data = json.load(f)\n        label = data['metadata']['label']\n        category = data['metadata']['category']\n        website = data['metadata']['website']\n        description = data['metadata']['description']\n        for addr in data['addresses']:\n            address = normalize_address(addr['address'], to_raw=False)",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "get_assets_from_dir",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def get_assets_from_dir(curr_dir: str, skip_addr_set: set[str]) -> dict[str, list[AssetData]]:\n    os.chdir(curr_dir)\n    assets_from_dir = {\"blacklist\": [], \"whitelist\": []}\n    for file in os.listdir():\n        if not file.endswith(\".json\"):\n            continue # skip not *.json files\n        assets_from_file = get_asset_from_json_file(file, skip_addr_set)\n        assets_from_dir[\"blacklist\"].extend(assets_from_file[\"blacklist\"])\n        assets_from_dir[\"whitelist\"].extend(assets_from_file[\"whitelist\"])\n    os.chdir(RETURN_DIR)",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "get_assets_from_dirs",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def get_assets_from_dirs(skip_addr_set: set[str]) -> dict[str, list[AssetData]]:\n    os.chdir(TON_LABELS_DIR + ASSETS_DIR)\n    all_assets = {\"blacklist\": [], \"whitelist\": []}\n    for curr_dir in os.listdir():\n        if os.path.isfile(curr_dir): # skip files\n            continue\n        assets_from_dir = get_assets_from_dir(curr_dir, skip_addr_set)\n        all_assets[\"blacklist\"].extend(assets_from_dir[\"blacklist\"])\n        all_assets[\"whitelist\"].extend(assets_from_dir[\"whitelist\"])\n    os.chdir(RETURN_DIR + RETURN_DIR)",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "def main():\n    try:\n        os.chdir(TO_REVIEW_DIR)\n        clone_ton_labels_repo()\n        os.chdir(RETURN_DIR)\n        known_addresses = get_known_assets_addresses()\n        os.chdir(TO_REVIEW_DIR)\n        blacklist_addresses = get_blacklist_addresses()\n        skip_addresses = get_skip_addresses()\n        known_addresses = known_addresses.union(blacklist_addresses)",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "TON_VIEWER_URL",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "TON_VIEWER_URL = \"https://tonviewer.com/\"\nTON_API_ACCOUNT_URL = \"https://tonapi.io/v2/accounts/\"\nTO_REVIEW_DIR = \"to_review/\"\nTON_LABELS_DIR = \"ton-labels/\"\nASSETS_DIR = \"assets/\"\nRETURN_DIR = \"../\"\nBLACKLIST_NFT_TYPES = [\"nft_collection\", \"nft_item\", \"nft_item_simple\"]\nBLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "TON_API_ACCOUNT_URL",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "TON_API_ACCOUNT_URL = \"https://tonapi.io/v2/accounts/\"\nTO_REVIEW_DIR = \"to_review/\"\nTON_LABELS_DIR = \"ton-labels/\"\nASSETS_DIR = \"assets/\"\nRETURN_DIR = \"../\"\nBLACKLIST_NFT_TYPES = [\"nft_collection\", \"nft_item\", \"nft_item_simple\"]\nBLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "TO_REVIEW_DIR",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "TO_REVIEW_DIR = \"to_review/\"\nTON_LABELS_DIR = \"ton-labels/\"\nASSETS_DIR = \"assets/\"\nRETURN_DIR = \"../\"\nBLACKLIST_NFT_TYPES = [\"nft_collection\", \"nft_item\", \"nft_item_simple\"]\nBLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "TON_LABELS_DIR",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "TON_LABELS_DIR = \"ton-labels/\"\nASSETS_DIR = \"assets/\"\nRETURN_DIR = \"../\"\nBLACKLIST_NFT_TYPES = [\"nft_collection\", \"nft_item\", \"nft_item_simple\"]\nBLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)\ndef get_types_from_tonapi(address: str) -> list[str]:",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "ASSETS_DIR",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "ASSETS_DIR = \"assets/\"\nRETURN_DIR = \"../\"\nBLACKLIST_NFT_TYPES = [\"nft_collection\", \"nft_item\", \"nft_item_simple\"]\nBLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)\ndef get_types_from_tonapi(address: str) -> list[str]:\n    url = TON_API_ACCOUNT_URL + address",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "RETURN_DIR",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "RETURN_DIR = \"../\"\nBLACKLIST_NFT_TYPES = [\"nft_collection\", \"nft_item\", \"nft_item_simple\"]\nBLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)\ndef get_types_from_tonapi(address: str) -> list[str]:\n    url = TON_API_ACCOUNT_URL + address\n    session = requests.Session()",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "BLACKLIST_NFT_TYPES",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "BLACKLIST_NFT_TYPES = [\"nft_collection\", \"nft_item\", \"nft_item_simple\"]\nBLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)\ndef get_types_from_tonapi(address: str) -> list[str]:\n    url = TON_API_ACCOUNT_URL + address\n    session = requests.Session()\n    retry_strategy = Retry(",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "BLACKLIST_JETTONS_TYPES",
        "kind": 5,
        "importPath": "parser",
        "description": "parser",
        "peekOfCode": "BLACKLIST_JETTONS_TYPES = [\"jetton_master\", \"jetton_wallet\", \"jetton_wallet_governed\"]\ndef clone_ton_labels_repo():\n    os.system(\"git clone https://github.com/ton-studio/ton-labels.git\")\ndef rm_ton_labels_dir():\n    shutil.rmtree(TON_LABELS_DIR)\ndef get_types_from_tonapi(address: str) -> list[str]:\n    url = TON_API_ACCOUNT_URL + address\n    session = requests.Session()\n    retry_strategy = Retry(\n        backoff_factor=0.5,",
        "detail": "parser",
        "documentation": {}
    },
    {
        "label": "normalize_address",
        "kind": 2,
        "importPath": "utlis",
        "description": "utlis",
        "peekOfCode": "def normalize_address(a, to_raw):\n    if len(a) == 48:\n        raw = base64.urlsafe_b64decode(a)\n        workchain = raw[1]\n        if workchain == 255:\n            workchain = -1\n        addr = raw[2:34]\n    elif \":\" in a:\n        parts = a.split(\":\")\n        if len(parts) != 2:",
        "detail": "utlis",
        "documentation": {}
    },
    {
        "label": "crc16",
        "kind": 2,
        "importPath": "utlis",
        "description": "utlis",
        "peekOfCode": "def crc16(data):\n    POLY = 0x1021\n    reg = 0\n    message = bytes(data) + bytes(2)\n    for byte in message:\n        mask = 0x80\n        while mask > 0:\n            reg <<= 1\n            if byte & mask:\n                reg += 1",
        "detail": "utlis",
        "documentation": {}
    }
]